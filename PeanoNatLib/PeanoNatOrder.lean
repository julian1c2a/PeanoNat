import PeanoNatLib.PeanoNatAxioms
import PeanoNatLib.PeanoNatStrictOrder -- Importa Lt y sus propiedades

open Peano
namespace Peano

    -- Definiciones y teoremas para Le (menor o igual)

    /-- Definici√≥n de "menor o igual que" para ‚Ñï‚ÇÄ. -/
    def Le (n m : ‚Ñï‚ÇÄ) : Prop := Lt n m ‚à® n = m
    def Ge (n m : ‚Ñï‚ÇÄ) : Prop := Lt m n ‚à® n = m
    /-- Instancia Decidable para Le n m.
        Se construye a partir de las instancias
        Decidable para Lt n m y n = m.
    -/
    instance decidableLe (n m : ‚Ñï‚ÇÄ) :
      Decidable (Le n m)
      :=
      match decidableLt n m with
      | isTrue h_lt => isTrue (Or.inl h_lt)
      | isFalse h_nlt =>
        match decEq n m with
        -- decEq proviene de `deriving DecidableEq` para ‚Ñï‚ÇÄ
        | isTrue h_eq => isTrue (Or.inr h_eq)
        | isFalse h_neq =>
          isFalse (fun h_le_contra =>
          -- Asumimos Le n m para llegar a una contradicci√≥n
            match h_le_contra with
            | Or.inl h_lt_ev => h_nlt h_lt_ev
            -- contradicci√≥n con ¬¨(Lt n m)
            | Or.inr h_eq_ev => h_neq h_eq_ev
            -- contradicci√≥n con n ‚â† m
          )

    -- Lemas √∫tiles para Le

    theorem le_refl (n : ‚Ñï‚ÇÄ) :
      Le n n
      :=
      Or.inr rfl

    theorem lt_imp_le (n m : ‚Ñï‚ÇÄ) :
      Lt n m ‚Üí Le n m
      :=
      fun h_lt => Or.inl h_lt

    theorem le_trans (n m k : ‚Ñï‚ÇÄ) :
      Le n m ‚Üí Le m k ‚Üí Le n k
      :=
      fun h_le_nm h_le_mk =>
      match h_le_nm with
      | Or.inl h_lt_nm => -- Caso n < m
        match h_le_mk with
        | Or.inl h_lt_mk =>
          Or.inl (lt_trans n m k h_lt_nm h_lt_mk)
          -- m < k => n < k
        | Or.inr h_eq_mk =>
            by rw [h_eq_mk] at h_lt_nm; exact Or.inl h_lt_nm
            -- m = k => n < k (que es n < m)
      | Or.inr h_eq_nm => -- Caso n = m
          by rw [h_eq_nm]; exact h_le_mk -- n = m => (m ‚â§ k)

    theorem le_antisymm (n m : ‚Ñï‚ÇÄ) :
      Le n m ‚Üí Le m n ‚Üí n = m
      :=
      fun h_le_nm h_le_mn =>
      match h_le_nm with
      | Or.inl h_lt_nm => -- n < m
        match h_le_mn with
        | Or.inl h_lt_mn =>
            (lt_asymm n m h_lt_nm h_lt_mn).elim
            -- n < m y m < n es contradicci√≥n
        | Or.inr h_eq_mn =>
            h_eq_mn.symm
            -- n < m y m = n es contradicci√≥n con lt_then_neq
      | Or.inr h_eq_nm =>
          h_eq_nm
          -- n = m, entonces trivialmente n = m

    theorem le_total (n m : ‚Ñï‚ÇÄ) :
      Le n m ‚à® Le m n
      :=
      match trichotomy n m with
      | Or.inl h_lt_nm =>
          Or.inl (lt_imp_le n m h_lt_nm)
          -- n < m => n ‚â§ m
      | Or.inr (Or.inl h_eq_nm) =>
          Or.inl (Or.inr h_eq_nm)
          -- n = m => n ‚â§ m
      | Or.inr (Or.inr h_lt_mn) =>
          Or.inr (lt_imp_le m n h_lt_mn)
          -- m < n => m ‚â§ n

    -- Relaci√≥n entre Le y œÉ

    -- El teorema zero_le se mueve aqu√≠ porque se usa en le_iff_lt_succ.
    theorem zero_le (n : ‚Ñï‚ÇÄ) :
      Le ùüò n
      :=
      match n with
      | ùüò    => Or.inr rfl
      | œÉ n' => Or.inl (lt_0_n (œÉ n') (succ_neq_zero n'))

    theorem le_iff_lt_succ (n m : ‚Ñï‚ÇÄ) :
      Le n m ‚Üî Lt n (œÉ m)
      := by
      constructor
      ¬∑ intro h_le_nm
        rcases h_le_nm with h_lt_nm | h_eq_nm
        ¬∑ -- Caso Lt n m. Queremos Lt n (œÉ m).
          -- Sabemos Lt m (œÉ m). Por transitividad: Lt n m ‚Üí Lt m (œÉ m) ‚Üí Lt n (œÉ m).
          exact lt_trans n m (œÉ m) h_lt_nm (lt_self_œÉ_self m)
        ¬∑ -- Caso n = m. Queremos Lt m (œÉ m).
          rw [h_eq_nm]
          exact lt_self_œÉ_self m
      ¬∑ intro h_lt_n_succ_m -- Lt n (œÉ m). Queremos Le n m.
        -- Usamos inducci√≥n sobre m generalizando n.
        induction m generalizing n with
        | zero => -- m = ùüò. h_lt_n_succ_m : Lt n (œÉ ùüò) (i.e. Lt n ùüô).
                  -- Queremos Le n ùüò.
          cases n with
          | zero => -- n = ùüò. Lt ùüò ùüô es true. Queremos Le ùüò ùüò.
            exact Or.inr rfl
          | succ n' => -- n = œÉ n'. h_lt_n_succ_m : Lt (œÉ n') (œÉ ùüò).
                       -- Por lt_iff_lt_œÉ_œÉ, esto es Lt n' ùüò.
            have h_lt_n_prime_zero : Lt n' ùüò := (lt_iff_lt_œÉ_œÉ n' ùüò).mp h_lt_n_succ_m
            -- Lt n' ùüò contradice nlt_n_0 n'.
            exact (nlt_n_0 n' h_lt_n_prime_zero).elim
        | succ m' ih_m' => -- m = œÉ m'. h_lt_n_succ_m : Lt n (œÉ (œÉ m')).
                           -- Queremos Le n (œÉ m').
          cases n with
          | zero => -- n = ùüò. h_lt_n_succ_m : Lt ùüò (œÉ (œÉ m')). Queremos Le ùüò (œÉ m').
            exact zero_le (œÉ m') -- Usamos el teorema zero_le.
          | succ n' => -- n = œÉ n'. h_lt_n_succ_m : Lt (œÉ n') (œÉ (œÉ m')).
                       -- Por lt_iff_lt_œÉ_œÉ, esto es Lt n' (œÉ m').
            have h_lt_n_prime_succ_m_prime : Lt n' (œÉ m') :=
              (lt_iff_lt_œÉ_œÉ n' (œÉ m')).mp h_lt_n_succ_m
            -- Hip√≥tesis inductiva: ih_m' (k : ‚Ñï‚ÇÄ) (h_lt_k_succ_m_prime : Lt k (œÉ m')) : Le k m'.
            -- Aplicamos IH a n' y h_lt_n_prime_succ_m_prime:
            have h_le_n_prime_m_prime : Le n' m' := ih_m' n' h_lt_n_prime_succ_m_prime
            -- Queremos Le (œÉ n') (œÉ m'). Sabemos Le n' m'.
            -- Esto se sigue de Le n' m' ‚Üí Le (œÉ n') (œÉ m'), que es una parte de succ_le_succ_iff.
            -- Lo probamos inline:
            rcases h_le_n_prime_m_prime with h_lt_n_p_m_p | h_eq_n_p_m_p
            ¬∑ -- Caso Lt n' m'. Entonces Lt (œÉ n') (œÉ m') por (lt_iff_lt_œÉ_œÉ n' m').mp.
              apply Or.inl
              exact (lt_iff_lt_œÉ_œÉ n' m').mp h_lt_n_p_m_p
            ¬∑ -- Caso n' = m'. Entonces œÉ n' = œÉ m'.
              apply Or.inr
              rw [h_eq_n_p_m_p]

    theorem succ_le_succ_iff (n m : ‚Ñï‚ÇÄ) : Le (œÉ n) (œÉ m) ‚Üî Le n m := by
      constructor
      ¬∑ intro h_le_succ
        unfold Le at *
        rcases h_le_succ with h_lt_succ | h_eq_succ
        ¬∑ -- Lt (œÉ n) (œÉ m) => Lt n m => Le n m
          apply Or.inl
          exact (lt_iff_lt_œÉ_œÉ n m).mpr h_lt_succ
        ¬∑ -- œÉ n = œÉ m => n = m => Le n m
          apply Or.inr
          -- h_eq_succ es una prueba de œÉ n = œÉ m.
          -- œÉ.inj h_eq_succ es una prueba de n = m.
          -- (œÉ.inj h_eq_succ) ‚ñ∏ rfl es una prueba de n = m.
          exact (‚Ñï‚ÇÄ.succ.inj h_eq_succ) ‚ñ∏ rfl
      ¬∑ intro h_le
        unfold Le at *
        rcases h_le with h_lt | h_eq
        ¬∑ -- Lt n m => Lt (œÉ n) (œÉ m) => Le (œÉ n) (œÉ m)
          apply Or.inl
          exact (lt_iff_lt_œÉ_œÉ n m).mp h_lt
        ¬∑ -- n = m => œÉ n = œÉ m => Le (œÉ n) (œÉ m)
          apply Or.inr
          exact h_eq ‚ñ∏ rfl

    theorem not_succ_le_zero (n : ‚Ñï‚ÇÄ) :
      ¬¨Le (œÉ n) ùüò
      := by
      intro h_contra
      unfold Le at h_contra
      -- h_contra : (Lt (œÉ n) ùüò) ‚à® (œÉ n = ùüò)
      -- Lt (œÉ n) ùüò es False.
      -- œÉ n = ùüò es False (por succ_neq_zero).
      -- Entonces False ‚à® False, que es False. Contradicci√≥n.
      cases h_contra with
      | inl h_lt => exact (nlt_n_0 (œÉ n) h_lt).elim
      | inr h_eq => exact (succ_neq_zero n h_eq).elim

    theorem le_zero_eq (n : ‚Ñï‚ÇÄ) :
      Le n ùüò ‚Üí n = ùüò
      := by
      intro h_le_n_zero
      unfold Le at h_le_n_zero
      rcases h_le_n_zero with h_lt_n_zero | h_eq_n_zero
      ¬∑ -- Lt n ùüò. Esto solo es posible si n no es sucesor,
        --   pero Lt n ùüò es siempre False.
        exact (nlt_n_0 n h_lt_n_zero).elim
      ¬∑ -- n = ùüò
        exact h_eq_n_zero

  theorem isomorph_Œ®_le (n m : ‚Ñï‚ÇÄ) :
    Œ® n ‚â§ Œ® m ‚Üî Le n m
    := by
    constructor
    ¬∑ -- Direcci√≥n ‚Üí: (Œ® n ‚â§ Œ® m) ‚Üí Le n m
      intro h_psi_le_psi_m -- h_psi_le_psi_m : Œ® n ‚â§ Œ® m
      -- Descomponemos Œ® n ‚â§ Œ® m usando el lema est√°ndar para Nat.
      rw [Nat.le_iff_lt_or_eq] at h_psi_le_psi_m
      cases h_psi_le_psi_m with
      | inl h_psi_lt_psi_m => -- Caso Œ® n < Œ® m
        -- Queremos probar Le n m, espec√≠ficamente Lt n m.
        apply Or.inl
        -- Asumimos que lt_iff_lt_Œ®_œÉ es (Œ® n < Œ® m) ‚Üî Lt n m.
        -- Entonces, (lt_iff_lt_Œ®_œÉ n m).mp transforma (Œ® n < Œ® m) en (Lt n m).
        exact (lt_iff_lt_Œ®_œÉ n m).mp h_psi_lt_psi_m
      | inr h_psi_eq_psi_m => -- Caso Œ® n = Œ® m
        -- Queremos probar Le n m, espec√≠ficamente n = m.
        apply Or.inr
        -- Œ®_inj es la prueba de que Œ® es inyectiva: (Œ® n = Œ® m) ‚Üí (n = m).
        exact Œ®_inj h_psi_eq_psi_m
    ¬∑ -- Direcci√≥n ‚Üê: Le n m ‚Üí (Œ® n ‚â§ Œ® m)
      intro h_le_nm -- h_le_nm : Le n m
      -- Por definici√≥n, Le n m es Lt n m ‚à® n = m.
      cases h_le_nm with
      | inl h_lt_nm => -- Caso Lt n m
        -- Queremos probar Œ® n ‚â§ Œ® m, espec√≠ficamente Œ® n < Œ® m.
        -- Asumimos que lt_iff_lt_Œ®_œÉ es (Œ® n < Œ® m) ‚Üî Lt n m.
        -- Entonces, (lt_iff_lt_Œ®_œÉ n m).mpr transforma (Lt n m) en (Œ® n < Œ® m).
        have h_psi_lt_psi_m : Œ® n < Œ® m := (lt_iff_lt_Œ®_œÉ n m).mpr h_lt_nm
        -- De Œ® n < Œ® m se sigue Œ® n ‚â§ Œ® m.
        exact Nat.le_of_lt h_psi_lt_psi_m
      | inr h_eq_nm => -- Caso n = m
        -- Queremos probar Œ® n ‚â§ Œ® m.
        -- Sustituimos n por m usando h_eq_nm. El objetivo se vuelve Œ® m ‚â§ Œ® m.
        rw [h_eq_nm]
        -- Esto es verdadero por reflexividad de ‚â§ para Nat.
        exact Nat.le_refl (Œ® m)

  theorem isomorph_Œõ_le (n m : Nat) :
    n ‚â§ m ‚Üî Le (Œõ n) (Œõ m)
    := by
    sorry


  instance : LE ‚Ñï‚ÇÄ := ‚ü®Le‚ü©

  --instance : Ge ‚Ñï‚ÇÄ := ‚ü®Ge‚ü©

end Peano
